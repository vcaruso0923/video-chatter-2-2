{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["PageContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormContainer","_templateObject2","FormItemContainer","_templateObject3","StyledButton","button","_templateObject4","OrText","p","_templateObject5","FormInput","input","_templateObject6","CreateRoom","props","roomId","setRoomId","useState","React","createElement","className","href","window","location","origin","onClick","id","uuid","history","push","concat","onChange","e","target","value","joinRoom","length","assign","alert","Container","StyledVideo","video","Video","ref","useRef","useEffect","peer","on","stream","current","srcObject","playsInline","autoPlay","videoConstraints","height","innerHeight","width","innerWidth","Room","peers","setPeers","socketRef","userVideo","peersRef","roomID","match","params","io","connect","navigator","mediaDevices","getUserMedia","audio","then","emit","users","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","find","catch","copyToClipboard","clipboard","writeText","split","pop","muted","map","index","key","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"0PAIA,MAAMA,EAAgBC,IAAOC,IAAGC,MAAAC,YAAA,iJAS1BC,EAAgBJ,IAAOC,IAAGI,MAAAF,YAAA,sMAU1BG,EAAoBN,IAAOC,IAAGM,MAAAJ,YAAA,qDAK9BK,EAAeR,IAAOS,OAAMC,MAAAP,YAAA,+IAQ5BQ,EAASX,IAAOY,EAACC,MAAAV,YAAA,yEAMjBW,EAAYd,IAAOe,MAAKC,MAAAb,YAAA,6EAmDfc,I,MAAAA,EA7CIC,IACf,MAAOC,EAAQC,GAAaC,mBAAS,IAerC,OACIC,IAAAC,cAAA,OAAKC,UAAU,4BACXF,IAAAC,cAAA,OAAKC,UAAU,uDACXF,IAAAC,cAAA,KAAGE,KAAMC,OAAOC,SAASC,QACrBN,IAAAC,cAAA,QAAMC,UAAU,gBAAe,WAIvCF,IAAAC,cAACxB,EAAa,CAACyB,UAAU,4BACrBF,IAAAC,cAACnB,EAAa,KACVkB,IAAAC,cAACjB,EAAiB,KACdgB,IAAAC,cAACf,EAAY,CAACqB,QAxBlC,WACI,MAAMC,EAAKC,cACXb,EAAMc,QAAQC,KAAK,SAADC,OAAUJ,MAsBmB,oBAGnCR,IAAAC,cAACZ,EAAM,KAAC,UAERW,IAAAC,cAACjB,EAAiB,KACdgB,IAAAC,cAACT,EAAS,CAACqB,SAAUC,GAAKhB,EAAUgB,EAAEC,OAAOC,UAGjDhB,IAAAC,cAACjB,EAAiB,KACdgB,IAAAC,cAACf,EAAY,CAACqB,QA7BjBU,KACTpB,EAAOqB,OAAS,GAChBd,OAAOC,SAASc,OAAOf,OAAOC,SAASC,OAAS,IAAMT,GAEtDuB,MAAM,sBAyBuC,kB,kCChFzD,MAAMC,EAAY3C,IAAOC,IAAGC,MAAAC,YAAA,4GAQtByC,EAAc5C,IAAO6C,MAAKxC,MAAAF,YAAA,6FAO1BK,EAAeR,IAAOS,OAAMF,MAAAJ,YAAA,uEAK5B2C,EAAQ5B,IACV,MAAM6B,EAAMC,mBAQZ,OANAC,oBAAU,KACN/B,EAAMgC,KAAKC,GAAG,SAAUC,IACpBL,EAAIM,QAAQC,UAAYF,KAE7B,IAEI9B,IAAAC,cAACqB,EAAW,CAACW,aAAW,EAACC,UAAQ,EAACT,IAAKA,KAG5CU,EAAmB,CACrBC,OAAQhC,OAAOiC,YAAc,EAC7BC,MAAOlC,OAAOmC,WAAa,GA+GhBC,MA5GF5C,IACT,MAAO6C,EAAOC,GAAY3C,mBAAS,IAC7B4C,EAAYjB,mBACZkB,EAAYlB,mBACZmB,EAAWnB,iBAAO,IAClBoB,EAASlD,EAAMmD,MAAMC,OAAOF,OAElCnB,oBAAU,KACNgB,EAAUZ,QAAUkB,IAAGC,QAAQ,KAC/BC,UAAUC,aACLC,aAAa,CAAC9B,MAAOY,EAAkBmB,OAAO,IAC9CC,KAAKzB,IACFc,EAAUb,QAAQC,UAAYF,EAC9Ba,EAAUZ,QAAQyB,KAAK,YAAaV,GACpCH,EAAUZ,QAAQF,GAAG,YAAa4B,IAC9B,MAAMhB,EAAQ,GACdgB,EAAMC,QAAQC,IACV,MAAM/B,EA8B1B,SAAoBgC,EAAcC,EAAU/B,GACxC,MAAMF,EAAO,IAAIkC,IAAK,CAClBC,WAAW,EACXC,SAAS,EACTlC,WAOJ,OAJAF,EAAKC,GAAG,SAAUoC,IACdtB,EAAUZ,QAAQyB,KAAK,iBAAkB,CAACI,eAAcC,WAAUI,aAG/DrC,EAzCsBsC,CAAWP,EAAQhB,EAAUZ,QAAQvB,GAAIsB,GACtDe,EAASd,QAAQpB,KAAK,CAClBwD,OAAQR,EACR/B,SAEJa,EAAM9B,KAAKiB,KAEfc,EAASD,KAGbE,EAAUZ,QAAQF,GAAG,cAAeuC,IAChC,MAAMxC,EAiCtB,SAAiByC,EAAgBR,EAAU/B,GACvC,MAAMF,EAAO,IAAIkC,IAAK,CAClBC,WAAW,EACXC,SAAS,EACTlC,WASJ,OANAF,EAAKC,GAAG,SAAUoC,IACdtB,EAAUZ,QAAQyB,KAAK,mBAAoB,CAACS,SAAQJ,eAGxDjC,EAAKqC,OAAOI,GAELzC,EA9CkB0C,CAAQF,EAAQH,OAAQG,EAAQP,SAAU/B,GACvDe,EAASd,QAAQpB,KAAK,CAClBwD,OAAQC,EAAQP,SAChBjC,SAGJc,EAASe,GAAS,IAAIA,EAAO7B,MAGjCe,EAAUZ,QAAQF,GAAG,4BAA6BuC,IACjCvB,EAASd,QAAQwC,KAAKjF,GAAKA,EAAE6E,SAAWC,EAAQ5D,IACxDoB,KAAKqC,OAAOG,EAAQH,YAGhCO,MAAM1D,IACHV,OAAOgB,MAAMN,MAEtB,IAqCH,OACId,IAAAC,cAAA,OAAKC,UAAU,4BACXF,IAAAC,cAAA,OAAKC,UAAU,uDACXF,IAAAC,cAAA,KAAGE,KAAMC,OAAOC,SAASC,QACrBN,IAAAC,cAAA,QAAMC,UAAU,gBAAe,UAEnCF,IAAAC,cAACf,EAAY,CAACqB,QAXFkE,KACpBtB,UAAUuB,UAAUC,UAAUvE,OAAOC,SAASF,MAC9CC,OAAOgB,MAAM,sCASmClB,UAAU,8BAA6B,YAAUE,OAAOC,SAASF,KAAKyE,MAAM,KAAKC,OACzH7E,IAAAC,cAAA,OAAKC,UAAU,gDACXF,IAAAC,cAAA,QAAMC,UAAU,eACZF,IAAAC,cAAA,YACID,IAAAC,cAAA,KAAGE,KAAMC,OAAOC,SAASC,QAAQ,kBAMjDN,IAAAC,cAACoB,EAAS,KACNrB,IAAAC,cAACqB,EAAW,CAACwD,OAAK,EAACrD,IAAKmB,EAAWV,UAAQ,EAACD,aAAW,IACtDQ,EAAMsC,IAAI,CAACnD,EAAMoD,IACPhF,IAAAC,cAACuB,EAAK,CAACyD,IAAKD,EAAOpD,KAAMA,QC/HrCsD,MAXf,WACE,OACElF,IAAAC,cAACkF,IAAa,KACZnF,IAAAC,cAACmF,IAAM,KACLpF,IAAAC,cAACoF,IAAK,CAACC,KAAK,IAAIC,OAAK,EAACC,UAAW7F,IACjCK,IAAAC,cAACoF,IAAK,CAACC,KAAK,gBAAgBE,UAAWhD,OCE3BiD,QACW,cAA7BrF,OAAOC,SAASqF,UAEe,UAA7BtF,OAAOC,SAASqF,UAEhBtF,OAAOC,SAASqF,SAAS3C,MACvB,2DCZN4C,IAASC,OACP5F,IAAAC,cAACD,IAAM6F,WAAU,KACf7F,IAAAC,cAACiF,EAAG,OAENY,SAASC,eAAe,SDyHpB,kBAAmB5C,WACrBA,UAAU6C,cAAcC,MACrB1C,KAAK2C,IACJA,EAAaC,eAEd3B,MAAM4B,IACLC,QAAQD,MAAMA,EAAME,Y","file":"static/js/main.5cf6094f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {v1 as uuid} from 'uuid'\r\nimport styled from 'styled-components'\r\n\r\nconst PageContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 60vh;\r\n    flex-wrap: wrap;\r\n`\r\n\r\nconst FormContainer = styled.div`\r\n    background-color: #343a40!important;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    max-width: 400px;\r\n    border-radius: 6px;\r\n`\r\n\r\nconst FormItemContainer = styled.div`\r\n    width: 100%;\r\n    text-align: center;\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n    background-color: #343a40;\r\n    color: white !important;\r\n    border-radius: 6px;\r\n    margin: 48px 0;\r\n    font-size: 1.75rem;\r\n`\r\n\r\nconst OrText = styled.p`\r\n    font-size: 1.5rem;\r\n    color: white;\r\n    margin 32px 0;\r\n`\r\n\r\nconst FormInput = styled.input`\r\n    margin-top: 32px;\r\n    width: 300px;\r\n    border-radius: 6px;\r\n`\r\n\r\nconst CreateRoom = props => {\r\n    const [roomId, setRoomId] = useState('')\r\n\r\n    function create() {\r\n        const id = uuid()\r\n        props.history.push(`/room/${id}`)\r\n    }\r\n\r\n    const joinRoom = () => {\r\n        if (roomId.length > 30) {\r\n            window.location.assign(window.location.origin + '/' + roomId)\r\n        } else {\r\n            alert('Invalid room ID!')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container-fluid centered'>\r\n            <nav className='navbar navbar-expand navbar-dark bg-dark sticky-top'>\r\n                <a href={window.location.origin}>\r\n                    <span className='navbar-brand'>Vroom</span>\r\n                </a>\r\n            </nav>\r\n\r\n            <PageContainer className='join-room-page-container'>\r\n                <FormContainer>\r\n                    <FormItemContainer>\r\n                        <StyledButton onClick={create}>Create new room</StyledButton>\r\n                    </FormItemContainer>\r\n\r\n                    <OrText>- OR -</OrText>\r\n\r\n                    <FormItemContainer>\r\n                        <FormInput onChange={e => setRoomId(e.target.value)}></FormInput>\r\n                    </FormItemContainer>\r\n\r\n                    <FormItemContainer>\r\n                        <StyledButton onClick={joinRoom}>Join room</StyledButton>\r\n                    </FormItemContainer>\r\n                </FormContainer>\r\n            </PageContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateRoom\r\n","import React, {useEffect, useRef, useState} from 'react'\r\nimport io from 'socket.io-client'\r\nimport Peer from 'simple-peer'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: auto;\r\n    margin: 0 auto;\r\n    flex-wrap: wrap;\r\n    padding: 0;\r\n`\r\n\r\nconst StyledVideo = styled.video`\r\n    height: 200px;\r\n    width: 33%;\r\n    display: flex;\r\n    margin-bottom: 15px;\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n    background-color: #343a40;\r\n    color: white !important\r\n`\r\n\r\nconst Video = props => {\r\n    const ref = useRef()\r\n\r\n    useEffect(() => {\r\n        props.peer.on('stream', stream => {\r\n            ref.current.srcObject = stream\r\n        })\r\n    }, [])\r\n\r\n    return <StyledVideo playsInline autoPlay ref={ref} />\r\n}\r\n\r\nconst videoConstraints = {\r\n    height: window.innerHeight / 2,\r\n    width: window.innerWidth / 2\r\n}\r\n\r\nconst Room = props => {\r\n    const [peers, setPeers] = useState([])\r\n    const socketRef = useRef()\r\n    const userVideo = useRef()\r\n    const peersRef = useRef([])\r\n    const roomID = props.match.params.roomID\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect('/')\r\n        navigator.mediaDevices\r\n            .getUserMedia({video: videoConstraints, audio: true})\r\n            .then(stream => {\r\n                userVideo.current.srcObject = stream\r\n                socketRef.current.emit('join room', roomID)\r\n                socketRef.current.on('all users', users => {\r\n                    const peers = []\r\n                    users.forEach(userID => {\r\n                        const peer = createPeer(userID, socketRef.current.id, stream)\r\n                        peersRef.current.push({\r\n                            peerID: userID,\r\n                            peer\r\n                        })\r\n                        peers.push(peer)\r\n                    })\r\n                    setPeers(peers)\r\n                })\r\n\r\n                socketRef.current.on('user joined', payload => {\r\n                    const peer = addPeer(payload.signal, payload.callerID, stream)\r\n                    peersRef.current.push({\r\n                        peerID: payload.callerID,\r\n                        peer\r\n                    })\r\n\r\n                    setPeers(users => [...users, peer])\r\n                })\r\n\r\n                socketRef.current.on('receiving returned signal', payload => {\r\n                    const item = peersRef.current.find(p => p.peerID === payload.id)\r\n                    item.peer.signal(payload.signal)\r\n                })\r\n            })\r\n            .catch(e => {\r\n                window.alert(e)\r\n            })\r\n    }, [])\r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream\r\n        })\r\n\r\n        peer.on('signal', signal => {\r\n            socketRef.current.emit('sending signal', {userToSignal, callerID, signal})\r\n        })\r\n\r\n        return peer\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream\r\n        })\r\n\r\n        peer.on('signal', signal => {\r\n            socketRef.current.emit('returning signal', {signal, callerID})\r\n        })\r\n\r\n        peer.signal(incomingSignal)\r\n\r\n        return peer\r\n    }\r\n\r\n    const copyToClipboard = () => {\r\n        navigator.clipboard.writeText(window.location.href);\r\n        window.alert('Copied meeting link to clipboard!')\r\n    }\r\n\r\n    return (\r\n        <div className='container-fluid centered'>\r\n            <nav className='navbar navbar-expand navbar-dark bg-dark sticky-top'>\r\n                <a href={window.location.origin}>\r\n                    <span className='navbar-brand'>Vroom</span>\r\n                </a>\r\n                <StyledButton onClick={copyToClipboard} className='navbar-text room-id-button'>Room ID: {window.location.href.split('/').pop()}</StyledButton>\r\n                <div className='justify-content-end navbar-collapse collapse'>\r\n                    <span className='navbar-text'>\r\n                        <span>\r\n                            <a href={window.location.origin}>Leave Room</a>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </nav>\r\n\r\n            <Container>\r\n                <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n                {peers.map((peer, index) => {\r\n                    return <Video key={index} peer={peer} />\r\n                })}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Room\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./routes/CreateRoom\";\r\nimport Room from \"./routes/Room\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={CreateRoom} />\r\n        <Route path=\"/room/:roomID\" component={Room} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}